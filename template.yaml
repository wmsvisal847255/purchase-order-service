AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 3

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment of this stack of resources

Mappings:
  ResourcesName:
    dev:
      tableName: PurchaseOrderDev
      tableNameArn: PurchaseOrderDevArn
      arn: congito-users-UserPool-dev
      userpoolId: us-east-1_AbK7rzs9g
      clientId: 4b8g7rrkms31sdr4ba6dau3133
    staging:
      tableName: PurchaseOrderStaging
      tableNameArn: PurchaseOrderStagingArn
      arn: congito-users-UserPool-staging
      userpoolId: us-east-1_JEZJrG9rt
      clientId: 3aasdadsanrvve12tci8d7im75
    prod:
      tableName: PurchaseOrderProd
      tableNameArn: PurchaseOrderProdArn
      arn: congito-users-UserPool-prod
      userpoolId: t
      clientId: t

Resources:
  PurchaseOrderApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      TracingEnabled: true
      Cors: "'*'"
      # Auth:
      #   Authorizers:
      #     GeneralAuth:
      #       AuthorizationScopes:
      #         - email
      #       IdentitySource: "$request.header.Authorization"
      #       JwtConfiguration:
      #         issuer: !Sub
      #         - https://cognito-idp.${AWS::Region}.amazonaws.com/
      #         - { Domain: !FindInMap ["ResourcesName", !Ref Environment, userpoolId] }
      #         audience:
      #           - !FindInMap [ResourcesName, !Ref Environment, clientId]

  PurchaseOrder:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.productPurchaseHandler
      Runtime: nodejs12.x
      CodeUri: order/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !FindInMap [ResourcesName, !Ref Environment, tableName]
      Environment:
        Variables:
          TABLE_NAME: !FindInMap [ResourcesName, !Ref Environment, tableName]
      Events:
        CreatePurchaseOrderApi:
          Type: Api
          Properties:
            Path: /order
            Method: POST
            RestApiId: !Ref PurchaseOrderApi
        UpdatePurchaseOrderApi:
          Type: Api
          Properties:
            Path: /order/{orderId}
            Method: ANY
            RestApiId: !Ref PurchaseOrderApi

  PurchaseOrderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !FindInMap [ResourcesName, !Ref Environment, tableName]
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
          StreamViewType: NEW_IMAGE

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  PurchaseOrderApi:
    Description: "API Gateway endpoint URL for ${Environment} stage for Purchase Order function"
    Value: !Sub "https://${PurchaseOrderApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/order/"
  PurchaseOrder:
    Description: "Purchase Order Lambda Function ARN"
    Value: !GetAtt PurchaseOrder.Arn
  PurchaseOrderTable:
    Description: "Purchase Order Dynamo DB Table"
    Value: !FindInMap [ResourcesName, !Ref Environment, tableName]
    Export: 
      Name: !FindInMap [ResourcesName, !Ref Environment, tableName]
  PurchaseOrderTableStream:
    Description: "Purchase Order Dynamo DB Table Stream"
    Value: !GetAtt PurchaseOrderTable.StreamArn
    Export: 
      Name: !FindInMap [ResourcesName, !Ref Environment, tableNameArn]
  PurchaseOrderIamRole:
    Description: "Implicit IAM Role created for Purchase Order function"
    Value: !GetAtt PurchaseOrderRole.Arn
